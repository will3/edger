// Generated by CoffeeScript 1.10.0
module.exports = function(voxel) {
  var addEdge, b, back, bottom, d, format, front, h, hash, i, j, k, l, left, m, map, n, p0, p1, p2, p3, p4, p5, p6, p7, parse, ref, ref1, ref2, right, shape, top, w;
  map = {};
  shape = voxel.shape;
  w = shape[0];
  h = shape[1];
  d = shape[2];
  hash = function(point) {
    return [point[0], point[1], point[2]].join(',');
  };
  parse = function(hash) {
    var components, x, y, z;
    components = hash.split(',');
    x = parseFloat(components[0]);
    y = parseFloat(components[1]);
    z = parseFloat(components[2]);
    return [x, y, z];
  };
  addEdge = function(a, b, dir) {
    var hasha, hashb, ori_a, slice;
    if (!map[dir]) {
      map[dir] = {};
    }
    slice = map[dir];
    hasha = hash(a);
    hashb = hash(b);
    if (slice[hasha] != null) {
      ori_a = slice[hasha];
      slice[hasha] = null;
      slice[hashb] = ori_a;
      return;
    }
    return map[dir][hashb] = a;
  };
  format = function() {
    var b, dir, hasha, result, slice;
    result = [];
    for (dir in map) {
      slice = map[dir];
      for (hasha in slice) {
        b = slice[hasha];
        if (!b) {
          continue;
        }
        result.push([b, parse(hasha)]);
      }
    }
    return result;
  };
  for (i = l = 0, ref = w; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
    for (j = m = 0, ref1 = h; 0 <= ref1 ? m <= ref1 : m >= ref1; j = 0 <= ref1 ? ++m : --m) {
      for (k = n = 0, ref2 = d; 0 <= ref2 ? n <= ref2 : n >= ref2; k = 0 <= ref2 ? ++n : --n) {
        b = voxel.get(i, j, k);
        if (!b) {
          continue;
        }
        right = voxel.get(i + 1, j, k);
        left = voxel.get(i - 1, j, k);
        top = voxel.get(i, j + 1, k);
        bottom = voxel.get(i, j - 1, k);
        front = voxel.get(i, j, k + 1);
        back = voxel.get(i, j, k - 1);
        p0 = [i, j, k];
        p1 = [i + 1, j, k];
        p2 = [i, j + 1, k];
        p3 = [i + 1, j + 1, k];
        p4 = [i, j, k + 1];
        p5 = [i + 1, j, k + 1];
        p6 = [i, j + 1, k + 1];
        p7 = [i + 1, j + 1, k + 1];
        if (!left && !bottom) {
          addEdge(p0, p4, 0);
        }
        if (!left && !top) {
          addEdge(p2, p6, 0);
        }
        if (!bottom && !right) {
          addEdge(p1, p5, 0);
        }
        if (!top && !right) {
          addEdge(p3, p7, 0);
        }
        if (!top && !back) {
          addEdge(p2, p3, 1);
        }
        if (!back && !bottom) {
          addEdge(p0, p1, 1);
        }
        if (!bottom && !front) {
          addEdge(p4, p5, 1);
        }
        if (!front && !top) {
          addEdge(p6, p7, 1);
        }
        if (!back && !right) {
          addEdge(p1, p3, 2);
        }
        if (!right && !front) {
          addEdge(p5, p7, 2);
        }
        if (!front && !left) {
          addEdge(p4, p6, 2);
        }
        if (!left && !back) {
          addEdge(p0, p2, 2);
        }
      }
    }
  }
  return format();
};
